# Generated by Django 4.2.4 on 2023-09-26 15:30

import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('employee_type', models.CharField(choices=[('student_employee', 'student employee'), ('permanent_employee', 'permanent employee'), ('temporary_employee', 'temporary employee')], default='regular', max_length=100)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FinancialCompliance',
            fields=[
                ('FCDAmmendmentId', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('POnumber', models.TextField(null=True)),
                ('DateFinalInvoiceRecieved', models.DateField(null=True)),
                ('PrimeSponsorType', models.CharField(choices=[('Federal', 'Federal'), ('NonFederal', 'Nonfederal')], max_length=255, null=True)),
                ('AwardType', models.CharField(choices=[('Cost', 'Cost'), ('Fixed', 'Fixed')], max_length=255, null=True)),
                ('BillingTerms', models.CharField(choices=[('Monthly', 'Monthly'), ('Quaterly', 'Quaterly'), ('Deliverable', 'Deliverable')], max_length=255, null=True)),
                ('FFATAFilledDate', models.DateField(null=True)),
                ('Notes', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='SubagreementTracking',
            fields=[
                ('SATAmmendmentId', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('PrimeAgreementExecutionDate', models.DateField()),
                ('SubrecipientName', models.TextField()),
                ('UEI', models.TextField()),
                ('SAMEntity', models.BooleanField()),
                ('SAMPI', models.BooleanField()),
                ('SubawardOrContract', models.BooleanField()),
                ('DateOfSubawardExecution', models.DateField()),
                ('Status', models.CharField(choices=[('Pending preaward', 'Pendingpreaward'), ('Pending NoA', 'Pendingnoa'), ('Pending PI/DA', 'Pendingpida'), ('Pending award set up', 'Pendingasetup'), ('Pending documents from Subrecipient', 'Pendingdocsubrecp'), ('Pending post Award', 'Pendingpostaward'), ('Determined to be CFS', 'Determinedcfs'), ('Active', 'Active'), ('Closed', 'Closed'), ('Withdrawn', 'Withdrawn')], default='Pending preaward')),
                ('SubawardNumber', models.TextField()),
                ('PrimeAwardNumber', models.TextField()),
                ('ProjectId', models.TextField()),
                ('PSVendorId', models.TextField()),
                ('PIFirstName', models.TextField()),
                ('PILastName', models.TextField()),
                ('PrimeSponsor', models.TextField()),
                ('FFATA', models.BooleanField()),
                ('IncrementallyEstimatedTotal', models.DecimalField(decimal_places=2, max_digits=12)),
                ('PeriodOfPerformanceStart', models.DateField()),
                ('PeriodOfPerformanceEnd', models.DateField()),
                ('EstimatedPeriodOfPerformanceStart', models.DateField()),
                ('EstimatedPeriodOfPerformanceEnd', models.DateField()),
                ('Budget', models.BooleanField()),
                ('Attachment3B', models.BooleanField()),
                ('BudgetJustificationScore', models.IntegerField()),
                ('EntityRiskAssessmentScore', models.IntegerField()),
                ('ProjectRiskAssessmentScore', models.IntegerField()),
                ('TwentyFiveKObligation', models.BooleanField()),
                ('DocusignRouting', django.contrib.postgres.fields.ArrayField(base_field=models.EmailField(max_length=254), size=None)),
                ('Comments', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Subawards',
            fields=[
                ('SbAId', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('FCDAmmendmentId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='subawardBackend.financialcompliance')),
                ('SATAmmendmentId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='subawardBackend.subagreementtracking')),
            ],
        ),
        migrations.AddConstraint(
            model_name='subagreementtracking',
            constraint=models.CheckConstraint(check=models.Q(('PeriodOfPerformanceStart__lte', models.F('PeriodOfPerformanceEnd'))), name='PeriodOfPerfstart_lt_PeriodOfPerfEnd'),
        ),
        migrations.AddConstraint(
            model_name='subagreementtracking',
            constraint=models.CheckConstraint(check=models.Q(('EstimatedPeriodOfPerformanceStart__lte', models.F('EstimatedPeriodOfPerformanceEnd'))), name='EtdPeriodOfPerfst_lt_EtdPeriodOfPerfEnd'),
        ),
        migrations.AddField(
            model_name='financialcompliance',
            name='SATAmmendmentId',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='subawardBackend.subagreementtracking'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
